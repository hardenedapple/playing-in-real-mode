Small list of rolling targets.

Install arch linux to a USB stick
    Copy config to USB stick.
    Compile kernel with new configuration on second laptop.
    Copy kernel to disk image
    Attempt to boot with GRUB via qemu

    Backup the disk image (save progress ...)
        dd if=/dev/sdb of=images/usb_arch.img bs=4M

    Boot it again through qemu (just to double check that everything works).

    Install the new kernel onto the USB stick.
    Boot via the laptop to make sure this works.
        will have to do this manually via the GRUB command line
        1) Need to add the line 'rootfstype=ext3' to kernel parameters.
        2) Need to use /dev/sdb1 instead of UUID in kernel parameters.
        
        Worked while using
            linux /boot/vmlinuz-linux root=/dev/sdb1 rootfstype=ext3 rw auto

    Backup the disk image (save progress ...)
        make sure to keep the previous one around -- will want to use that in
        the future.
        dd if=/dev/sdb of=images/arch_usb_noinitrd.img bs=4M

    Find the block positions of the kernel on the USB image and hard-code them
    into my bootloader.

    Attempt to boot this kernel using sebastian-minimal-bootloader.asm
        (know this apparently works -- he must have at least gotten it to work
        once)

    Attempt to boot this kernel using the version of my bootloader that didn't
    try to do anything with an initramfs.
    
    Attempt to boot the previous image (i.e. the one with an initramfs) with
    the version of my bootloader that tries to work with an initramfs.

Currently not booting, and failing with the following message:
    Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)

    Pages found with a similar problem
        https://wiki.gentoo.org/wiki/Knowledge_Base:Unable_to_mount_root_fs
            Talks about ensuring the correct root=... option.
            I tried the sebastian-minimal-linux-bootloader.asm bootloader
            with command lines including
            'root=/dev/sda1',
            'root=/dev/sda2',
            'root=UUID=ff9be8c0-4821-4d00-8046-78db6f7303b4'
                (taken from GRUB command line)
            and 'auto' with & without either of the 'root' options above.
            None of these change the error message I'm getting.

    Things I can do to get more information
        Video screen and rewatch look for hard-to-see error messages.
        Step through the function that errors using bochs.
            Find the memory address to break at from the backtrace.


Boot Linux directly from my bootloader, without using GRUB at all.
    These websites that might help figure out exactly what to do.
    http://duartes.org/gustavo/blog/post/kernel-boot-process/
    http://lxr.linux.no/#linux+v2.6.25.6/Documentation/i386/boot.txt
    # Newer version of the above
    # The debian install I have uses linux 3.16, so this might have too much
    # information, but I expect backwards compatability more than forwards
    # compatability, so the 4.10 docs should be better than the 2.6 docs
    http://lxr.linux.no/#linux+v4.10.1/Documentation/x86/boot.txt
    Minimal linux bootloader (I have copied the assembly file into
    otherBIOSes/sebastian-minimal-linux-bootloader.asm)
    http://sebastian-plotz.blogspot.co.uk/
    Install Linux in a partition on a USB stick, set things up like GRUB would,
    load the environment and jump to the correct place.

    Menu entry of loading Debian GNU/Linux from the Debian grub.cfg
    ```
    menuentry 'Debian GNU/Linux' --class debian --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-ff9be8c0-4821-4d00-8046-78db6f7303b4' {
        load_video
        insmod gzio
        if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi
        insmod part_msdos
        insmod ext2
        set root='hd2,msdos1'
        if [ x$feature_platform_search_hint = xy ]; then
          search --no-floppy --fs-uuid --set=root --hint-ieee1275='ieee1275//sas/disk@0,msdos1' --hint-bios=hd2,msdos1 --hint-efi=hd2,msdos1 --hint-baremetal=ahci2,msdos1  ff9be8c0-4821-4d00-8046-78db6f7303b4
        else
          search --no-floppy --fs-uuid --set=root ff9be8c0-4821-4d00-8046-78db6f7303b4
        fi
        echo	'Loading Linux 3.16.0-4-686-pae ...'
        linux	/boot/vmlinuz-3.16.0-4-686-pae root=UUID=ff9be8c0-4821-4d00-8046-78db6f7303b4 ro  quiet
        echo	'Loading initial ramdisk ...'
        initrd	/boot/initrd.img-3.16.0-4-686-pae
    }
    ```
    
    Current understanding:
        Find the LBA location of the first partition by reading the partition
        sector.
        Check that the partition is ext\d (TODO -- find out how)
        Use knowledge of the filesystem to find vmlinuz

Find the vmlinuz-linux file on the first partition instead of hard-coding it.
    This will require some understanding of the ext\d filesystem.

UI
    All I want in terms of UI is to have two descriptions ("boot linux", and
    "as root"), I should be able to press an arrow key to select which to boot.

Enable protected mode
    This is actually reasonably easy -- I did it as part of a tutorial a while
    ago and had a play-around with segment caching.
    When to do it in the boot process I don't know (should it be early so that
    I get to use it while loading Linux, should it be late so as to keep the
    bootloader un-complex).

First off, attempt *some* multiboot specification stuff.
    The manual mentions state that a multiboot compliant bootloader must leave
    the machine in by the time the kernel is booted..
    Implement these things one by one.
    https://www.gnu.org/software/grub/manual/multiboot/multiboot.html#Machine-state


Boot Windows directly from my bootloader (on this machine -- eek!)
    Should be pretty much the same -- assuming the windows bootloader knows
    that it's a bootloader stored in a specific partition.
    (and assuming the GRUB bootloader knows the same).

Full Multiboot implementation for ext3 filesystem.
    http://wiki.osdev.org/Multiboot

Why is it that `bochs -qf bochsrc.txt` behaves differently to `bochs -f bochsrc.txt`.


PUTOFF Jump into GRUB from my bootloader:
    Install GRUB in the partition boot section (not sure what this means), and
    jump into that sector from my bootloader.
    Will have to relocate the code that does the moving of GRUB so that it
    doesn't overwrite itself while copying GRUB into the relevant location in
    memory.

    https://richardfearn.wordpress.com/2008/03/14/chainloading-from-one-grub-to-another/



Total Target:
    Boot Linux off an ext[[:digit:]] filesystem.
    Linux must be in the first partition of the filesystem.
    Must be on the same USB stick as the bootloader.

